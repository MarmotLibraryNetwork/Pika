<?xml version="1.0" encoding="UTF-8" ?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<!--
     For more details about configurations options that may appear in
     this file, see http://wiki.apache.org/solr/SolrConfigXml.
-->
<config>
	<!-- In all configuration below, a prefix of "solr." for class names
       is an alias that causes solr to search appropriate packages,
       including org.apache.solr.(search|update|request|core|analysis)

       You may also specify a fully qualified Java classname if you
       have your own custom plugins.
    -->

	<!-- Controls what version of Lucene various components of Solr
			 adhere to.  Generally, you want to use the latest version to
			 get all bug fixes and improvements. It is highly recommended
			 that you fully re-index after changing this setting as it can
			 affect both how text is indexed and queried.
	-->

	<luceneMatchVersion>4.10.4</luceneMatchVersion>

	<!-- <lib/> directives can be used to instruct Solr to load any Jars
       identified and use them to resolve any "plugins" specified in
       your solrconfig.xml or schema.xml (ie: Analyzers, Request
       Handlers, etc...).

       All directories and paths are resolved relative to the
       instanceDir.

       Please note that <lib/> directives are processed in the order
       that they appear in your solrconfig.xml file, and are "stacked"
       on top of each other when building a ClassLoader - so if you have
       plugin jars with dependencies on other jars, the "lower level"
       dependency jars should be loaded first.

       If a "./lib" directory exists in your instanceDir, all files
       found in it are included as if you had used the following
       syntax...

              <lib dir="./lib" />
    -->

	<!-- A 'dir' option by itself adds any files found in the directory
			 to the classpath, this is useful for including all jars in a
			 directory.

			 When a 'regex' is specified in addition to a 'dir', only the
			 files in that directory which completely match the regex
			 (anchored on both ends) will be included.

			 If a 'dir' option (with or without a regex) is used and nothing
			 is found that matches, a warning will be logged.

			 The examples below can be used to load some solr-contribs along
			 with their external dependencies.
		-->
	<lib dir="${solr.install.dir:../../../..}/contrib/extraction/lib" regex=".*\.jar" />
	<lib dir="${solr.install.dir:../../../..}/dist/" regex="solr-cell-\d.*\.jar" />

	<lib dir="${solr.install.dir:../../../..}/contrib/clustering/lib/" regex=".*\.jar" />
	<lib dir="${solr.install.dir:../../../..}/dist/" regex="solr-clustering-\d.*\.jar" />

	<lib dir="${solr.install.dir:../../../..}/contrib/langid/lib/" regex=".*\.jar" />
	<lib dir="${solr.install.dir:../../../..}/dist/" regex="solr-langid-\d.*\.jar" />

	<lib dir="${solr.install.dir:../../../..}/contrib/velocity/lib" regex=".*\.jar" />
	<!-- browse-resources must come before solr-velocity JAR in order to override localized resources -->
	<lib path="${solr.install.dir:../../../..}/example/files/browse-resources"/>
	<lib dir="${solr.install.dir:../../../..}/dist/" regex="solr-velocity-\d.*\.jar" />

	<lib dir="${solr.install.dir:../../../..}/contrib/analysis-extras/lucene-libs/" regex=".*icu.*\.jar"/>
	<lib dir="${solr.install.dir:../../../..}/contrib/analysis-extras/lib/" regex="icu4j.*\.jar" />

	<lib dir="${solr.install.dir:../../../..}/dist/" regex="solr-analysis-extras.*\.jar" />

	<!-- an exact 'path' can be used instead of a 'dir' to specify a
       specific jar file.  This will cause a serious error to be logged
       if it can't be loaded.
    -->
	<!--
		 <lib path="../a-jar-that-does-not-exist.jar" />
	-->

	<!-- Data Directory

       Used to specify an alternate directory to hold all index data
       other than the default ./data under the Solr home.  If
       replication is in use, this should match the replication
       configuration.
    -->
	<dataDir>${solr.solr.home:./solr}/grouped</dataDir>

	<!-- The DirectoryFactory to use for indexes.

       solr.StandardDirectoryFactory is filesystem
       based and tries to pick the best implementation for the current
       JVM and platform.  solr.NRTCachingDirectoryFactory, the default,
       wraps solr.StandardDirectoryFactory and caches small files in memory
       for better NRT performance.

       One can force a particular implementation via solr.MMapDirectoryFactory,
       solr.NIOFSDirectoryFactory, or solr.SimpleFSDirectoryFactory.

       solr.RAMDirectoryFactory is memory based, not
       persistent, and doesn't work with replication.
    -->
	<directoryFactory name="DirectoryFactory"
	                  class="${solr.directoryFactory:solr.NRTCachingDirectoryFactory}"/>

	<!-- The CodecFactory for defining the format of the inverted index.
       The default implementation is SchemaCodecFactory, which is the official Lucene
       index format, but hooks into the schema to provide per-field customization of
       the postings lists and per-document values in the fieldType element
       (postingsFormat/docValuesFormat). Note that most of the alternative implementations
       are experimental, so if you choose to customize the index format, it's a good
       idea to convert back to the official format e.g. via IndexWriter.addIndexes(IndexReader)
       before upgrading to a newer version to avoid unnecessary reindexing.
  -->
	<codecFactory class="solr.SchemaCodecFactory"/>

	<!-- To disable dynamic schema REST APIs, use the following for <schemaFactory>:

			 <schemaFactory class="ClassicIndexSchemaFactory"/>

			 When ManagedIndexSchemaFactory is specified instead, Solr will load the schema from
			 the resource named in 'managedSchemaResourceName', rather than from schema.xml.
			 Note that the managed schema resource CANNOT be named schema.xml.  If the managed
			 schema does not exist, Solr will create it after reading schema.xml, then rename
			 'schema.xml' to 'schema.xml.bak'.

			 Do NOT hand edit the managed schema - external modifications will be ignored and
			 overwritten as a result of schema modification REST API calls.

			 When ManagedIndexSchemaFactory is specified with mutable = true, schema
			 modification REST API calls will be allowed; otherwise, error responses will be
			 sent back for these requests.
	-->
	<schemaFactory class="ClassicIndexSchemaFactory"/>
	<!--
	<schemaFactory class="ManagedIndexSchemaFactory">
		<bool name="mutable">true</bool>
		<str name="managedSchemaResourceName">managed-schema</str>
	</schemaFactory>
	-->

	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
       Index Config - These settings control low-level behavior of indexing
       Most example settings here show the default value, but are commented
       out, to more easily see where customizations have been made.

       Note: This replaces <indexDefaults> and <mainIndex> from older versions
       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<indexConfig>
		<!-- maxFieldLength was removed in 4.0. To get similar behavior, include a
				 LimitTokenCountFilterFactory in your fieldType definition. E.g.
		 <filter class="solr.LimitTokenCountFilterFactory" maxTokenCount="10000"/>
		-->
		<!-- Maximum time to wait for a write lock (ms) for an IndexWriter. Default: 1000 -->
		<!-- <writeLockTimeout>1000</writeLockTimeout>  -->

		<!-- Expert: Enabling compound file will use less files for the index,
				 using fewer file descriptors on the expense of performance decrease.
				 Default in Lucene is "true". Default in Solr is "false" (since 3.6) -->
		<!-- <useCompoundFile>false</useCompoundFile> -->

		<!-- ramBufferSizeMB sets the amount of RAM that may be used by Lucene
				 indexing for buffering added documents and deletions before they are
				 flushed to the Directory.
				 maxBufferedDocs sets a limit on the number of documents buffered
				 before flushing.
				 If both ramBufferSizeMB and maxBufferedDocs is set, then
				 Lucene will flush based on whichever limit is hit first.  -->
		<!-- <ramBufferSizeMB>100</ramBufferSizeMB> -->
		<!-- <maxBufferedDocs>1000</maxBufferedDocs> -->

		<!-- Expert: Merge Policy
				 The Merge Policy in Lucene controls how merging of segments is done.
				 The default since Solr/Lucene 3.3 is TieredMergePolicy.
				 The default since Lucene 2.3 was the LogByteSizeMergePolicy,
				 Even older versions of Lucene used LogDocMergePolicy.
			-->
		<!--
				<mergePolicy class="org.apache.lucene.index.TieredMergePolicy">
					<int name="maxMergeAtOnce">10</int>
					<int name="segmentsPerTier">10</int>
				</mergePolicy>
			-->

		<!-- Merge Factor
				 The merge factor controls how many segments will get merged at a time.
				 For TieredMergePolicy, mergeFactor is a convenience parameter which
				 will set both MaxMergeAtOnce and SegmentsPerTier at once.
				 For LogByteSizeMergePolicy, mergeFactor decides how many new segments
				 will be allowed before they are merged into one.
				 Default is 10 for both merge policies.
			-->
		<!--
		<mergeFactor>10</mergeFactor>
			-->

		<!-- Expert: Merge Scheduler
				 The Merge Scheduler in Lucene controls how merges are
				 performed.  The ConcurrentMergeScheduler (Lucene 2.3 default)
				 can perform merges in the background using separate threads.
				 The SerialMergeScheduler (Lucene 2.2 default) does not.
		 -->
		<!--
			 <mergeScheduler class="org.apache.lucene.index.ConcurrentMergeScheduler"/>
			 -->

		<!-- LockFactory

				 This option specifies which Lucene LockFactory implementation
				 to use.

				 single = SingleInstanceLockFactory - suggested for a
									read-only index or when there is no possibility of
									another process trying to modify the index.
				 native = NativeFSLockFactory - uses OS native file locking.
									Do not use when multiple solr webapps in the same
									JVM are attempting to share a single index.
				 simple = SimpleFSLockFactory  - uses a plain file for locking

				 Defaults: 'native' is default for Solr3.6 and later, otherwise
									 'simple' is the default

				 More details on the nuances of each LockFactory...
				 http://wiki.apache.org/lucene-java/AvailableLockFactories
		-->
		<lockType>${solr.lock.type:native}</lockType>

		<!-- Commit Deletion Policy
				 Custom deletion policies can be specified here. The class must
				 implement org.apache.lucene.index.IndexDeletionPolicy.

				 The default Solr IndexDeletionPolicy implementation supports
				 deleting index commit points on number of commits, age of
				 commit point and optimized status.

				 The latest commit point should always be preserved regardless
				 of the criteria.
		-->
		<!--
		<deletionPolicy class="solr.SolrDeletionPolicy">
		-->
		<!-- The number of commit points to be kept -->
		<!-- <str name="maxCommitsToKeep">1</str> -->
		<!-- The number of optimized commit points to be kept -->
		<!-- <str name="maxOptimizedCommitsToKeep">0</str> -->
		<!--
				Delete all commit points once they have reached the given age.
				Supports DateMathParser syntax e.g.
			-->
		<!--
			 <str name="maxCommitAge">30MINUTES</str>
			 <str name="maxCommitAge">1DAY</str>
		-->
		<!--
		</deletionPolicy>
		-->

		<!-- Lucene Infostream

         To aid in advanced debugging, Lucene provides an "InfoStream"
         of detailed information when indexing.

         Setting The value to true will instruct the underlying Lucene
         IndexWriter to write its debugging info the specified file
      -->
		<!-- <infoStream file="INFOSTREAM.txt">false</infoStream> -->
	</indexConfig>

	<!-- JMX

			 This example enables JMX if and only if an existing MBeanServer
			 is found, use this if you want to configure JMX through JVM
			 parameters. Remove this to disable exposing Solr configuration
			 and statistics to JMX.

			 For more details see http://wiki.apache.org/solr/SolrJmx
		-->
	<jmx />
	<!-- If you want to connect to a particular server, specify the
			 agentId
		-->
	<!-- <jmx agentId="myAgent" /> -->
	<!-- If you want to start a new MBeanServer, specify the serviceUrl -->
	<!-- <jmx serviceUrl="service:jmx:rmi:///jndi/rmi://localhost:9999/solr"/>
		-->

	<!-- The default high-performance update handler -->
	<updateHandler class="solr.DirectUpdateHandler2">

		<!-- Enables a transaction log, used for real-time get, durability, and
				 and solr cloud replica recovery.  The log can grow as big as
				 uncommitted changes to the index, so use of a hard autoCommit
				 is recommended (see below).
				 "dir" - the target directory for transaction logs, defaults to the
								solr data directory.  -->
		<updateLog>
			<str name="dir">${solr.ulog.dir:}</str>
		</updateLog>

		<!-- AutoCommit

				 Perform a hard commit automatically under certain conditions.
				 Instead of enabling autoCommit, consider using "commitWithin"
				 when adding documents.

				 http://wiki.apache.org/solr/UpdateXmlMessages

				 maxDocs - Maximum number of documents to add since the last
									 commit before automatically triggering a new commit.

				 maxTime - Maximum amount of time in ms that is allowed to pass
									 since a document was added before automatically
									 triggering a new commit.
				 openSearcher - if false, the commit causes recent index changes
					 to be flushed to stable storage, but does not cause a new
					 searcher to be opened to make those changes visible.

				 If the updateLog is enabled, then it's highly recommended to
				 have some sort of hard autoCommit to limit the log size.
			-->
		<autoCommit>
			<maxDocs>${solr.autoCommit.maxDocs:10000}</maxDocs>
			<!-- Do a full commit once per minute this could be extended to several minutes or we could just use max docs -->
			<maxTime>${solr.autoCommit.maxTime:10000}</maxTime>
			<openSearcher>false</openSearcher>
		</autoCommit>

		<!-- softAutoCommit is like autoCommit except it causes a
				 'soft' commit which only ensures that changes are visible
				 but does not ensure that data is synced to disk.  This is
				 faster and more near-realtime friendly than a hard commit.
			-->
		<autoSoftCommit>
			<!--
				Do a soft commit every 5 seconds so new values are available for searching
				 realistically, we should be able to extend this to every 30 seconds or once a minute.
			-->
			<maxDocs>${solr.autoSoftCommit.maxDocs:10000}</maxDocs>
			<maxTime>${solr.autoSoftCommit.maxTime:30000}</maxTime>
		</autoSoftCommit>

		<!-- Update Related Event Listeners

				 Various IndexWriter related events can trigger Listeners to
				 take actions.

				 postCommit - fired after every commit or optimize command
				 postOptimize - fired after every optimize command
			-->
		<!-- The RunExecutableListener executes an external command from a
				 hook such as postCommit or postOptimize.

				 exe - the name of the executable to run
				 dir - dir to use as the current working directory. (default=".")
				 wait - the calling thread waits until the executable returns.
								(default="true")
				 args - the arguments to pass to the program.  (default is none)
				 env - environment variables to set.  (default is none)
			-->
		<!-- This example shows how RunExecutableListener could be used
				 with the script based replication...
				 http://wiki.apache.org/solr/CollectionDistribution
			-->
		<!--
			 <listener event="postCommit" class="solr.RunExecutableListener">
				 <str name="exe">solr/bin/snapshooter</str>
				 <str name="dir">.</str>
				 <bool name="wait">true</bool>
				 <arr name="args"> <str>arg1</str> <str>arg2</str> </arr>
				 <arr name="env"> <str>MYVAR=val1</str> </arr>
			 </listener>
			-->

	</updateHandler>

	<!-- IndexReaderFactory

			 Use the following format to specify a custom IndexReaderFactory,
			 which allows for alternate IndexReader implementations.

			 ** Experimental Feature **

			 Please note - Using a custom IndexReaderFactory may prevent
			 certain other features from working. The API to
			 IndexReaderFactory may change without warning or may even be
			 removed from future releases if the problems cannot be
			 resolved.


			 ** Features that may not work with custom IndexReaderFactory **

			 The ReplicationHandler assumes a disk-resident index. Using a
			 custom IndexReader implementation may cause incompatibility
			 with ReplicationHandler and may cause replication to not work
			 correctly. See SOLR-1366 for details.

		-->
	<!--
	<indexReaderFactory name="IndexReaderFactory" class="package.class">
		<str name="someArg">Some Value</str>
	</indexReaderFactory >
	-->

	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
       Query section - these settings control query time things like caches
       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<query>
		<!-- Max Boolean Clauses

			 Maximum number of clauses in each BooleanQuery,  an exception
			 is thrown if exceeded.

			 ** WARNING **

			 This option actually modifies a global Lucene property that
			 will affect all SolrCores.  If multiple solrconfig.xml files
			 disagree on this property, the value at any given moment will
			 be based on the last SolrCore to be initialized.

		-->
		<maxBooleanClauses>2048</maxBooleanClauses>


		<!-- Solr Internal Query Caches

			 There are two implementations of cache available for Solr,
			 LRUCache, based on a synchronized LinkedHashMap, and
			 FastLRUCache, based on a ConcurrentHashMap.

			 FastLRUCache has faster gets and slower puts in single
			 threaded operation and thus is generally faster than LRUCache
			 when the hit ratio of the cache is high (> 75%), and may be
			 faster under other scenarios on multi-cpu systems.
	-->

		<!-- Filter Cache

			 Cache used by SolrIndexSearcher for filters (DocSets),
			 unordered sets of *all* documents that match a query.  When a
			 new searcher is opened, its caches may be prepopulated or
			 "autowarmed" using data from caches in the old searcher.
			 autowarmCount is the number of items to prepopulate.  For
			 LRUCache, the autowarmed items will be the most recently
			 accessed items.
		 Parameters:
			 class - the SolrCache implementation LRUCache or
							 (LRUCache or FastLRUCache)
			 size - the maximum number of entries in the cache
			 initialSize - the initial capacity (number of entries) of
				 the cache.  (see java.util.HashMap)
			 autowarmCount - the number of entries to prepopulate from
				 and old cache.
			 -->
		<filterCache
				class="solr.FastLRUCache"
				size="0"
				initialSize="0"
				autowarmCount="0"/>

		<!-- Query Result Cache

				 Caches results of searches - ordered lists of document ids
				 (DocList) based on a query, a sort, and the range of documents requested.
				 Additional supported parameter by LRUCache:
						maxRamMB - the maximum amount of RAM (in MB) that this cache is allowed
											 to occupy
			-->
		<queryResultCache
				class="solr.LRUCache"
				size="0"
				initialSize="0"
				autowarmCount="0"/>

		<!-- Document Cache

					 Caches Lucene Document objects (the stored fields for each
					 document).  Since Lucene internal document ids are transient,
					 this cache will not be autowarmed.
				-->
		<documentCache
				class="solr.LRUCache"
				size="0"
				initialSize="0"/>

		<!-- Field Value Cache

			 Cache used to hold field values that are quickly accessible
			 by document id.  The fieldValueCache is created by default
			 even if not configured here.
		-->
		<!--
		 <fieldValueCache class="solr.FastLRUCache"
											size="512"
											autowarmCount="128"
											showItems="32" />
		-->

		<!-- Custom Cache

			 Example of a generic cache.  These caches may be accessed by
			 name through SolrIndexSearcher.getCache(),cacheLookup(), and
			 cacheInsert().  The purpose is to enable easy caching of
			 user/application level data.  The regenerator argument should
			 be specified as an implementation of solr.CacheRegenerator
			 if autowarming is desired.
		-->
		<!--
		 <cache name="myUserCache"
						class="solr.LRUCache"
						size="4096"
						initialSize="1024"
						autowarmCount="1024"
						regenerator="com.mycompany.MyRegenerator"
						/>
		-->


		<!-- Lazy Field Loading

			 If true, stored fields that are not requested will be loaded
			 lazily.  This can result in a significant speed improvement
			 if the usual case is to not load all stored fields,
			 especially if the skipped fields are large compressed text
			 fields.
	-->
		<enableLazyFieldLoading>true</enableLazyFieldLoading>

		<!-- Use Filter For Sorted Query

				A possible optimization that attempts to use a filter to
				satisfy a search.  If the requested sort does not include
				score, then the filterCache will be checked for a filter
				matching the query. If found, the filter will be used as the
				source of document ids, and then the sort will be applied to
				that.

				For most situations, this will not be useful unless you
				frequently get the same search repeatedly with different sort
				options, and none of them ever use "score"
		 -->
		<!--
			<useFilterForSortedQuery>true</useFilterForSortedQuery>
		 -->

		<!-- Result Window Size

				An optimization for use with the queryResultCache.  When a search
				is requested, a superset of the requested number of document ids
				are collected.  For example, if a search for a particular query
				requests matching documents 10 through 19, and queryWindowSize is 50,
				then documents 0 through 49 will be collected and cached.  Any further
				requests in that range can be satisfied via the cache.
		 -->
		<queryResultWindowSize>40</queryResultWindowSize>

		<!-- Maximum number of documents to cache for any entry in the
				queryResultCache.
		 -->
		<queryResultMaxDocsCached>0</queryResultMaxDocsCached>

		<!-- Query Related Event Listeners

		Various IndexSearcher related events can trigger Listeners to
		take actions.

		newSearcher - fired whenever a new searcher is being prepared
		and there is a current searcher handling requests (aka
		registered).  It can be used to prime certain caches to
		prevent long request times for certain requests.

		firstSearcher - fired whenever a new searcher is being
		prepared but there is no current registered searcher to handle
		requests or to gain autowarming data from.


 -->
		<!-- QuerySenderListener takes an array of NamedList and executes a
			 local query request for each NamedList in sequence.
		-->
		<listener event="newSearcher" class="solr.QuerySenderListener">
			<arr name="queries">

			</arr>
		</listener>
		<listener event="firstSearcher" class="solr.QuerySenderListener">
			<arr name="queries">
				<!--
				<lst>
					<str name="q">static firstSearcher warming in solrconfig.xml</str>
				</lst>
				-->
			</arr>
		</listener>

		<!-- Use Cold Searcher

			 If a search request comes in and there is no current
			 registered searcher, then immediately register the still
			 warming searcher and use it.  If "false" then all requests
			 will block until the first searcher is done warming.
		-->
		<useColdSearcher>true</useColdSearcher>

		<!-- Max Warming Searchers

			 Maximum number of searchers that may be warming in the
			 background concurrently.  An error is returned if this limit
			 is exceeded.

			 Recommend values of 1-2 for read-only slaves, higher for
			 masters w/o cache warming.
		-->
		<maxWarmingSearchers>2</maxWarmingSearchers>

	</query>

	<!-- Request Dispatcher

			 This section contains instructions for how the SolrDispatchFilter
			 should behave when processing requests for this SolrCore.

			 handleSelect is a legacy option that affects the behavior of requests
			 such as /select?qt=XXX

			 handleSelect="true" will cause the SolrDispatchFilter to process
			 the request and dispatch the query to a handler specified by the
			 "qt" param, assuming "/select" isn't already registered.

			 handleSelect="false" will cause the SolrDispatchFilter to
			 ignore "/select" requests, resulting in a 404 unless a handler
			 is explicitly registered with the name "/select"

			 handleSelect="true" is not recommended for new users, but is the default
			 for backwards compatibility
		-->
	<requestDispatcher handleSelect="true" >
		<!--Make sure your system has some authentication before enabling remote streaming!  -->
		<requestParsers enableRemoteStreaming="true" multipartUploadLimitInKB="2048000" />

		<!-- Set HTTP caching related parameters (for proxy caches and clients).

				 To get the behaviour of Solr 1.2 (ie: no caching related headers)
				 use the never304="true" option and do not specify a value for
				 <cacheControl>
		-->
		<!-- <httpCaching never304="true"> -->
		<httpCaching lastModifiedFrom="openTime"
		             etagSeed="Solr">
			<!-- lastModFrom="openTime" is the default, the Last-Modified value
						(and validation against If-Modified-Since requests) will all be
						relative to when the current Searcher was opened.
						You can change it to lastModFrom="dirLastMod" if you want the
						value to exactly corrispond to when the physical index was last
						modified.

						etagSeed="..." is an option you can change to force the ETag
						header (and validation against If-None-Match requests) to be
						differnet even if the index has not changed (ie: when making
						significant changes to your config file)

						lastModifiedFrom and etagSeed are both ignored if you use the
						never304="true" option.
			 -->
			<!-- If you include a <cacheControl> directive, it will be used to
						generate a Cache-Control header, as well as an Expires header
						if the value contains "max-age="

						By default, no Cache-Control header is generated.

						You can use the <cacheControl> option even if you have set
						never304="true"
			 -->
			<!-- <cacheControl>max-age=30, public</cacheControl> -->
		</httpCaching>
	</requestDispatcher>


	<!-- requestHandler plugins... incoming queries will be dispatched to the
		 correct handler based on the path or the qt (query type) param.
		 Names starting with a '/' are accessed with the a path equal to the
		 registered name.  Names without a leading '/' are accessed with:
			http://host/app/select?qt=name
		 If no qt is defined, the requestHandler that declares default="true"
		 will be used.
	-->
	<requestHandler name="standard" class="solr.StandardRequestHandler" default="true">
		<!-- default values for query parameters -->
		<lst name="defaults">
			<str name="echoParams">explicit</str>
			<!--
			 <int name="rows">10</int>
			 <str name="fl">*</str>
			 <str name="version">2.1</str>
				-->
		</lst>
		<arr name="last-components">
		</arr>
	</requestHandler>

	<!-- the following handler will be used for eligible dismax searches defined
		 in web/conf/searchspecs.yaml.  Searches relying on advanced features
		 incompatible with dismax will be sent to the standard handler instead.
		 You can use this handler definition to set global Dismax settings
		 (i.e. mm / bf).  If you need different settings for different types of
		 searches (i.e. Title vs. Author), you can also configure individual
		 settings in the searchspecs.yaml file.
	-->
	<requestHandler name="dismax" class="solr.SearchHandler">
		<lst name="defaults">
			<str name="defType">dismax</str>
			<str name="echoParams">explicit</str>
		</lst>
	</requestHandler>

	<requestHandler name="morelikethis" class="solr.MoreLikeThisHandler">
		<lst name="defaults">
			<str name="mlt.fl">title,title_short,callnumber-label,topic,language,author,publishDate</str>
			<str name="mlt.qf">
				title^75
				title_short^100
				callnumber-label^400
				topic^300
				language^30
				author^75
				publishDate
			</str>
			<int name="mlt.mintf">1</int>
			<int name="mlt.mindf">1</int>
			<str name="mlt.boost">true</str>
			<int name="mlt.count">5</int>
			<int name="rows">5</int>
		</lst>
	</requestHandler>

	<requestHandler name="morelikethis2" class="solr.MoreLikeThisHandler">
		<lst name="defaults">
			<str name="mlt.fl">subject_facet,topic_facet,awards_facet,genre_facet,geographic_facet,callnumber-label,era,author</str>
			<str name="mlt.qf">
				subject_facet^800
				topic_facet^600
				callnumber-label^200
				awards_facet^100
				author^75
				era^50
				genre_facet^50
				geographic_facet^50
			</str>
			<int name="mlt.mintf">1</int>
			<int name="mlt.mindf">1</int>
			<str name="mlt.boost">true</str>
		</lst>
	</requestHandler>

	<requestHandler name="morelikethese" class="solr.MoreLikeThisHandler">
		<lst name="defaults">
			<str name="mlt.fl">subject_facet,topic_facet,awards_facet,genre_facet,geographic_facet,callnumber-label,era,author,target_audience_full,literary_form_full</str>
			<str name="mlt.qf">
				subject_facet^800
				topic_facet^600
				callnumber-label^200
				awards_facet^100
				author^75
				era^50
				genre_facet^50
				geographic_facet^50
				target_audience_full^25
				literary_form_full^25
			</str>
			<int name="mlt.mintf">1</int>
			<int name="mlt.mindf">1</int>
			<str name="mlt.boost">true</str>
		</lst>
	</requestHandler>
	
	<requestHandler name="/replication" class="solr.ReplicationHandler" >
		<lst name="master">
			<!--Replicate on 'startup' and 'commit'. 'optimize' is also a valid value for replicateAfter. -->
			<str name="replicateAfter">startup</str>
			<str name="replicateAfter">commit</str>
			<str name="confFiles">schema.xml,mapping-ISOLatin1Accent.txt,protwords.txt,stopwords.txt,synonyms.txt,elevate.xml</str>
		</lst>
	</requestHandler>

	<!-- Search component for extracting terms (useful for sitemap generation) -->
	<searchComponent name="term" class="org.apache.solr.handler.component.TermsComponent">
	</searchComponent>

	<!--

	 Search components are registered to SolrCore and used by Search Handlers

	 By default, the following components are avaliable:

	 <searchComponent name="query"     class="org.apache.solr.handler.component.QueryComponent" />
	 <searchComponent name="facet"     class="org.apache.solr.handler.component.FacetComponent" />
	 <searchComponent name="mlt"       class="org.apache.solr.handler.component.MoreLikeThisComponent" />
	 <searchComponent name="highlight" class="org.apache.solr.handler.component.HighlightComponent" />
	 <searchComponent name="stats"     class="org.apache.solr.handler.component.StatsComponent" />
	 <searchComponent name="debug"     class="org.apache.solr.handler.component.DebugComponent" />

	 If you register a searchComponent to one of the standard names, that will be used instead.

	 -->

	<requestHandler name="/search" class="org.apache.solr.handler.component.SearchHandler">
		<lst name="defaults">
			<str name="echoParams">explicit</str>
		</lst>
		<!--
		By default, this will register the following components:

		<arr name="components">
			<str>query</str>
			<str>facet</str>
			<str>mlt</str>
			<str>highlight</str>
			<str>debug</str>
		</arr>

		To insert handlers before or after the 'standard' components, use:

		<arr name="first-components">
			<str>first</str>
		</arr>

		<arr name="last-components">
			<str>last</str>
		</arr>

		-->
		<arr name="last-components">
			<str>elevator</str>
		</arr>
	</requestHandler>

	<!-- Request handler to extract terms (useful for sitemap generation) -->
	<requestHandler name="/term" class="org.apache.solr.handler.component.SearchHandler">
		<arr name="components">
			<str>term</str>
		</arr>
	</requestHandler>

	<searchComponent name="elevator" class="org.apache.solr.handler.component.QueryElevationComponent" >
		<!-- pick a fieldType to analyze queries -->
		<str name="queryFieldType">string</str>
		<str name="config-file">elevate.xml</str>
	</searchComponent>

	<requestHandler name="/elevate" class="org.apache.solr.handler.component.SearchHandler" startup="lazy">
		<lst name="defaults">
			<str name="echoParams">explicit</str>
		</lst>
		<arr name="last-components">
			<str>elevator</str>
		</arr>
	</requestHandler>



	<!-- Update request handler.

			 Note: Since solr1.1 requestHandlers requires a valid content type header if posted in
			 the body. For example, curl now requires: -H 'Content-type:text/xml; charset=utf-8'
			 The response format differs from solr1.1 formatting and returns a standard error code.

			 To enable solr1.1 behavior, remove the /update handler or change its path
		-->
	<requestHandler name="/update" class="solr.UpdateRequestHandler" />

	<!-- Field Analysis Request Handler

	RequestHandler that provides much the same functionality as
	analysis.jsp. Provides the ability to specify multiple field
	types and field names in the same request and outputs
	index-time and query-time analysis for each of them.

	Request parameters are:
	analysis.fieldname - field name whose analyzers are to be used

	analysis.fieldtype - field type whose analyzers are to be used
	analysis.fieldvalue - text for index-time analysis
	q (or analysis.q) - text for query time analysis
	analysis.showmatch (true|false) - When set to true and when
	query analysis is performed, the produced tokens of the
	field value analysis will be marked as "matched" for every
	token that is produces by the query analysis
	-->
	<requestHandler name="/analysis/field"
	                startup="lazy"
	                class="solr.FieldAnalysisRequestHandler" />


	<!-- Document Analysis Handler

	http://wiki.apache.org/solr/AnalysisRequestHandler

	An analysis handler that provides a breakdown of the analysis
	process of provided documents. This handler expects a (single)
	content stream with the following format:

	<docs>
	<doc>
	<field name="id">1</field>
	<field name="name">The Name</field>
	<field name="text">The Text Value</field>
	</doc>
	<doc>...</doc>
	<doc>...</doc>
	...
	</docs>

	Note: Each document must contain a field which serves as the
	unique key. This key is used in the returned response to associate
	an analysis breakdown to the analyzed document.

	Like the FieldAnalysisRequestHandler, this handler also supports
	query analysis by sending either an "analysis.query" or "q"
	request parameter that holds the query text to be analyzed. It
	also supports the "analysis.showmatch" parameter which when set to
	true, all field tokens that match the query tokens will be marked
	as a "match".
	-->
	<requestHandler name="/analysis/document"
	                class="solr.DocumentAnalysisRequestHandler"
	                startup="lazy" />


	<!-- CSV update handler, loaded on demand -->
	<requestHandler name="/update/csv" class="solr.CSVRequestHandler" startup="lazy" />

	<!--
   Admin Handlers - This will register all the standard admin RequestHandlers.  Adding
   this single handler is equivolent to registering:

  <requestHandler name="/admin/luke"       class="org.apache.solr.handler.admin.LukeRequestHandler" />
  <requestHandler name="/admin/system"     class="org.apache.solr.handler.admin.SystemInfoHandler" />
  <requestHandler name="/admin/plugins"    class="org.apache.solr.handler.admin.PluginInfoHandler" />
  <requestHandler name="/admin/threads"    class="org.apache.solr.handler.admin.ThreadDumpHandler" />
  <requestHandler name="/admin/properties" class="org.apache.solr.handler.admin.PropertiesRequestHandler" />
  <requestHandler name="/admin/file"       class="org.apache.solr.handler.admin.ShowFileRequestHandler" >

  If you wish to hide files under ${solr.home}/conf, explicitly register the ShowFileRequestHandler using:
  <requestHandler name="/admin/file" class="org.apache.solr.handler.admin.ShowFileRequestHandler" >
    <lst name="invariants">
     <str name="hidden">synonyms.txt</str>
     <str name="hidden">anotherfile.txt</str>
    </lst>
  </requestHandler>
  -->
	<!-- MDN This is required for Solr 4, but is not needed in Solr 5 -->
	<requestHandler name="/admin/" class="org.apache.solr.handler.admin.AdminHandlers" />

	<!-- ping/healthcheck -->
	<requestHandler name="/admin/ping" class="PingRequestHandler">
		<lst name="defaults">
			<str name="qt">standard</str>
			<str name="q">solrpingquery</str>
			<str name="echoParams">all</str>
		</lst>
	</requestHandler>

	<!-- Echo the request contents back to the client -->
	<requestHandler name="/debug/dump" class="solr.DumpRequestHandler" >
		<lst name="defaults">
			<str name="echoParams">explicit</str> <!-- for all params (including the default etc) use: 'all' -->
			<str name="echoHandler">true</str>
		</lst>
	</requestHandler>

	<highlighting>
		<!-- Configure the standard fragmenter -->
		<!-- This could most likely be commented out in the "default" case -->
		<fragmenter name="gap" class="org.apache.solr.highlight.GapFragmenter" default="true">
			<lst name="defaults">
				<int name="hl.fragsize">100</int>
			</lst>
		</fragmenter>

		<!-- A regular-expression-based fragmenter (f.i., for sentence extraction) -->
		<fragmenter name="regex" class="org.apache.solr.highlight.RegexFragmenter">
			<lst name="defaults">
				<!-- slightly smaller fragsizes work better because of slop -->
				<int name="hl.fragsize">70</int>
				<!-- allow 50% slop on fragment sizes -->
				<float name="hl.regex.slop">0.5</float>
				<!-- a basic sentence pattern -->
				<str name="hl.regex.pattern">[-\w ,/\n\"']{20,200}</str>
			</lst>
		</fragmenter>

		<!-- Configure the standard formatter -->
		<formatter name="html" class="org.apache.solr.highlight.HtmlFormatter" default="true">
			<lst name="defaults">
				<str name="hl.simple.pre"><![CDATA[<em>]]></str>
				<str name="hl.simple.post"><![CDATA[</em>]]></str>
			</lst>
		</formatter>
	</highlighting>


	<!-- queryResponseWriter plugins... query responses will be written using the
		writer specified by the 'wt' request parameter matching the name of a registered
		writer.
		The "default" writer is the default and will be used if 'wt' is not specified
		in the request. XMLResponseWriter will be used if nothing is specified here.
		The json, python, and ruby writers are also available by default.

		<queryResponseWriter name="xml" class="org.apache.solr.request.XMLResponseWriter" default="true"/>
		<queryResponseWriter name="json" class="org.apache.solr.request.JSONResponseWriter"/>
		<queryResponseWriter name="python" class="org.apache.solr.request.PythonResponseWriter"/>
		<queryResponseWriter name="ruby" class="org.apache.solr.request.RubyResponseWriter"/>
		<queryResponseWriter name="php" class="org.apache.solr.request.PHPResponseWriter"/>
		<queryResponseWriter name="phps" class="org.apache.solr.request.PHPSerializedResponseWriter"/>

		<queryResponseWriter name="custom" class="com.example.MyResponseWriter"/>
	-->

	<!-- config for the admin interface -->
	<admin>
		<defaultQuery>shakespeare</defaultQuery>

		<!-- configure a healthcheck file for servers behind a loadbalancer
		<healthcheck type="file">server-enabled</healthcheck>
		-->
	</admin>

</config>
